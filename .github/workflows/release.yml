name: Release workflow

on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@master
      with:
        fetch-depth: '0'
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        zip --junk-paths docs JOURNAL.md ./examples/*
    - name: Bump version and push tag
      id: tag_release
      uses: anothrNick/github-tag-action@1.17.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DEFAULT_BUMP: patch

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_release.outputs.tag }}
        release_name: ${{ steps.tag_release.outputs.tag }} # eg. prefix with Release ..
        body: |
            Changes in this Release
            - First Change (example)
            - Second Change (example 2)
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./docs.zip
        asset_name: docs.zip
        asset_content_type: application/zip

    # - name: Upload release notes
    #   if: steps.tag_release.outputs.tag
    #   uses: Roang-zero1/github-create-release-action@master
    #   with:
    #     created_tag: ${{ steps.tag_release.outputs.tag }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}